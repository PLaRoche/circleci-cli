#!/usr/bin/env bash

bindir=
etcdir=
token=$(test -f "${etcdir}/circleci" && sed -n '1p' < "${etcdir}/circleci")

## Command parsing ################################################################################
cmd="${1}" ; shift

## Argument and option utility functions ##########################################################

function placehold-branch() {
  echo "$(git rev-parse --abbrev-ref HEAD)"
}

function placehold-build() {
  echo $("${bindir}/circleci" builds ${1} --filter='.[] | .build_num' | head -n 1)
}

function placehold-project() {
  local url=$(hub browse -u 2> /dev/null)
  echo "$(echo "${url}" | cut -d '/' -f4)/$(echo "${url}" | cut -d '/' -f5)"
}

## Argument and option parsing ####################################################################
while (( "$#" )); do
  case "${1}" in
    --branch=*) branch=${1/--branch=/''} ; shift ;;
    --branch*|-B*) branch=${2} ; shift ; shift ;;
    --build=*) build=${1/--build=/''} ; shift ;;
    --build*|-b*) build=${2} ; shift ; shift ;;
    --compact|-c) compact='-c' ; shift ;;
    --filter=*) filter=${1/--filter=/''} ; shift ;;
    --filter*|-f*) filter=${2} ; shift ; shift ;;
    --monochrome|-m) monochrome='-M' ; shift ;;
    --parameter-key=*) paramkeys+=(${1/--parameter-key=/}) ; shift ;;
    --parameter-key*|-K*) paramkeys+=(${2}) ; shift ; shift ;;
    --parameter-value=*) paramvals+=(${1/--parameter-value=/}) ; shift ;;
    --parameter-value*|-V*) paramvals+=(${2}) ; shift ; shift ;;
    --project=*) project=${1/--project=/''} ; shift ;;
    --project*|-p*) project=${2} ; shift ; shift ;;
    --resolution=*) resolution=${1/--resolution=/''} ; shift ;;
    --resolution*|-r*) resolution=${2} ; shift ; shift ;;
    --revision=*) revision=${1/--revision=/''} ; shift ;;
    --revision*|-R*) revision=${2} ; shift ; shift ;;
    --token=*) token=${1/--token=/''} ; shift ;;
    --token|-t*) token=${2} ; shift ; shift ;;
    --)
      case "${cmd}" in
        trigger) test -n "${project}" && branch=$(placehold-branch) ;;
      esac
      case "${cmd}" in
        artifacts|await|browse|build|cancel|notify|retry)
          test -n "${project}" && build=$(placehold-build "${project}")
        ;;
      esac
      case "${cmd}" in
        artifacts|await|browse|build|builds|cancel|notify|project|retry|trigger)
          test -z "${project}" && project=$(placehold-project)
        ;;
      esac
      shift
    ;;
    *)
      case "${cmd}" in
        artifacts|await|browse|build|cancel|notify|retry)
          test -n "${1}" && test -n "${project}" && build=${1}
        ;;
      esac
      case "${cmd}" in
        trigger)
          test -n "${1}" && test -n "${project}" && branch=${1}
        ;;
      esac
      case "${cmd}" in
        artifacts|await|browse|build|builds|cancel|notify|project|retry|trigger)
          test -n "${1}" && test -z "${project}" && project=${1}
        ;;
      esac
      shift
    ;;
  esac
done

## Implicit/default arguments and options #########################################################
case "${cmd}" in
  await|notify) test -z "${resolution}" && resolution=10 ;;
esac
case "${cmd}" in
  artifacts|await|browse|build|builds|cancel|notify|project|retry|trigger)
    test -z "${project}" && test -n "$(hub browse -u 2> /dev/null)" && project=$(placehold-project)
  ;;
esac
case "${cmd}" in
  trigger) test -z "${branch}" && branch=$(placehold-branch) ;;
esac
case "${cmd}" in
  artifacts|await|browse|build|cancel|notify|retry)
    test -z "${build}" && build=$(placehold-build "${project}")
  ;;
esac

## Argument and option prompting ##################################################################
case "${cmd}" in
  init)
    _token=$(test -f "${etcdir}/circleci" && sed -n '1p' < "${etcdir}/circleci")

    if test -z "${token}" || test "${token}" == "${_token}"; then
      read -e -p 'Enter CircleCI API token: ' token
    fi
  ;;
esac
case "${cmd}" in
  artifacts|await|browse|build|builds|cancel|notify|project|retry|trigger)
    test -z "${project}" && read -e -p 'Enter project slug (e.g. rockymadden/circleci-cli): ' project
  ;;
esac
case "${cmd}" in
  artifacts|await|browse|build|cancel|notify|retry)
    test -z "${build}" && read -e -p 'Enter build (e.g. 123): ' build
  ;;
esac
case "${cmd}" in
  trigger) test -z "${branch}" && read -e -p 'Enter branch (e.g. master): ' branch ;;
esac

## Command utility functions ######################################################################
function jqify() {
  case "${1}" in
    GET) local rsp ; rsp=$(curl -f -s -H 'Accept: application/json' "${2}?circle-token=${token}") ;;
    POST)
      local rsp ; rsp=$(\
        curl -f -s -X POST \
          -H 'Accept: application/json' \
          -H 'Content-Type: application/json' \
          -d "${3}" "${2}?circle-token=${token}")
    ;;
  esac

  case "$?" in
    0) echo ${rsp} | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
    *) return 1 ;;
  esac
}

## Command functions ##############################################################################
function artifacts() {
  jqify GET "https://circleci.com/api/v1/project/${project}/${build}/artifacts"
}

function await() {
  function go() {
    local rsp ; rsp=$(\
      curl -f -s -H 'Accept: application/json' \
      "https://circleci.com/api/v1/project/${project}/${build}?circle-token=${token}")

    case "$?" in
      0)
        local outcome=$(echo ${rsp} | jq -r '.outcome')

        case "${outcome}" in
          null) sleep "${resolution}" ; go ;;
          success) echo ${rsp} | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
          *) echo ${rsp} | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
        esac
      ;;
      *) return 1 ;;
    esac
  }

  go ; return $?
}

function browse() {
  open "https://circleci.com/gh/${project}/${build}"
}

function build() {
  jqify GET "https://circleci.com/api/v1/project/${project}/${build}"
}

function builds() {
  jqify GET "https://circleci.com/api/v1/project/${project}?circle-token=${token}"
}

function cancel() {
  jqify POST "https://circleci.com/api/v1/project/${project}/${build}/cancel"
}

function help() {
  local a=(${0//\// })
  local bin=${a[${#a[@]}-1]}

  echo 'Usage:'
  echo "  ${bin} artifacts <project> <build> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} await <project> <build> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo '    [--resolution|-r <seconds>]'
  echo "  ${bin} browse <project> [build]"
  echo "  ${bin} build <project> <build> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} builds <project> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} cancel <project> <build> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} init [--compact|-c] [--filter|-f <filter>] [--monochrome|-m] [--token|-t <token>]"
  echo "  ${bin} me [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} notify <project> <build> [--resolution|-r <seconds>]"
  echo "  ${bin} project <project> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} projects [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} retry <project> <build> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} trigger <project> <branch> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo '    [--parameter-key|-K <key>] [--parameter-value|-V <value>] [--revision|-R <revision>]'
  echo
  echo 'Configuration Commands:'
  echo '  init    Initialize'
  echo
  echo 'Core Commands:'
  echo '  artifacts    List the artifacts produced by a given build for a given project'
  echo '  build        Details of a given build for a given project'
  echo '  builds       Details of all builds for a given project'
  echo '  cancel       Cancel a given build for a given project'
  echo '  me           Details of the given user'
  echo '  project      Details of a given project'
  echo '  projects     List projects of the given user'
  echo '  retry        Retry a given build for a given project'
  echo '  trigger      Trigger a new build of a given branch for a given project'
  echo
  echo 'Convenience Commands:'
  echo '  await     Await success or failure of a given build for a given project'
  echo '  browse    Open CircleCI page of a given project'
  echo '  notify    Await success or failure of a given build for a given project and create an OS X'
  echo '            notification with the details'
}

function init() {
  echo "${token}" > "${etcdir}/circleci"

  case "$?" in
    0) echo '{"outcome": "success"}' | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
    *) echo '{"outcome": "failed"}' | jq -r ${compact} ${monochrome} "${filter:=.}" ; return 1 ;;
  esac
}

function me() {
  jqify GET "https://circleci.com/api/v1/me"
}

function notify() {
  local rsp ; rsp=$(${0} await -c -m -p "${project}" -b "${build}" -r "${resolution}")

  case "$?" in
    0)
      local message=$(echo ${rsp} | jq -r '.username + "/" + .reponame + "#" + (.build_num | tostring) + ": " + .outcome')
      local url=$(echo ${rsp} | jq -r '.build_url')

      terminal-notifier \
        -appIcon https://getbadges.io/images/circle-ci-service-128.png \
        -message "${message}" \
        -open "${url}" \
        -title "CircleCI"
    ;;
    *) return 1 ;;
  esac
}

function project() {
  local rsp ; rsp=$(\
    curl -f -s -H 'Accept: application/json' \
    "https://circleci.com/api/v1/projects?circle-token=${token}")

  case "$?" in
    0)
      echo ${rsp} | \
      jq -c -M "map(select(.username + \"/\" + .reponame == \"${project}\")) | .[]" | \
      jq -r ${compact} ${monochrome} "${filter:=.}"
    ;;
    *) return 1 ;;
  esac
}

function projects() {
  jqify GET "https://circleci.com/api/v1/projects"
}

function retry() {
  jqify POST "https://circleci.com/api/v1/project/${project}/${build}/retry"
}

function trigger() {
  local p=''
  local j=''
  local r=''

  if [ "${#paramkeys[@]}" -gt 0 ]; then
    local kv=''

    for i in "${!paramkeys[@]}"; do
      kv+="\"${paramkeys[$i]}\":\"${paramvals[$i]}\""
      if [ $(( ${i} + 1 )) -lt "${#paramkeys[@]}" ]; then kv+=","; fi
    done

    p='"build_parameters": {'"${kv}"'}'
  fi

  if [ -n "${revision}" ]; then
    r='"revision": "'"${revision}"'"'
  fi

  if [ -n "${p}" ] && [ -n "${r}" ]; then
    j="{${p},${r}}"
  elif [ -n "${p}" ] || [ -n "${r}" ]; then
    j="{${p}${r}}"
  fi

  jqify POST \
    "https://circleci.com/api/v1/project/${project}/tree/${branch}" "${j}"
}

function version() {
  echo 'v0.7.0'
}

## Command routing ################################################################################
case "${cmd}" in
  --help|-h) help ; exit 0 ;;
  --version|-v) version ; exit 0 ;;
  init) "${cmd}" ; exit $? ;;
  artifacts|await|browse|build|builds|cancel|me|notify|project|projects|retry|trigger)
    if test -z "${token}"; then
      echo '{"initialized": false, "outcome": "failed"}' |
        jq -r ${compact} ${monochrome} "${filter:=.}"
      exit 1
    else
      "${cmd}" ; exit $?
    fi
  ;;
  *) help ; exit 1 ;;
esac
